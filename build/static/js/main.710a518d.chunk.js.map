{"version":3,"sources":["utils/history.js","components/home/textBox.js","hooks/useTranslation.js","utils/checkInput.js","views/home/App.js","routes/home.js","routes/index.js","styles/overrideTheme.js","serviceWorker.js","index.js"],"names":["createBrowserHistory","props","TextField","id","multiline","rows","variant","value","onChange","handleChange","name","style","width","backgroundColor","borderRadius","disabled","useTranslation","useState","translation","setTranslation","errorText","setErrorText","useEffect","test","obj","process","getTranslation","a","axios","post","then","hiragana","data","converted","useStyles","makeStyles","theme","error","fontSize","color","textBoxText","textAlign","App","classes","kanji","setKanji","event","target","className","CssBaseline","Container","fixed","Grid","container","spacing","item","xs","HomeRouter","exact","path","component","Home","AppRouter","history","createMuiTheme","overrides","MuiOutlinedInput","root","MuiInputBase","Boolean","window","location","hostname","match","finalApp","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.710a518d.chunk.js","sourcesContent":["import { createBrowserHistory } from 'history';\n\nexport default createBrowserHistory();","import React, { Fragment } from \"react\";\nimport TextField from '@material-ui/core/TextField';\n\nexport default (props) => {\n    return (\n        <Fragment>\n            <TextField\n                id=\"standard-multiline-flexible\"\n                multiline\n                rows=\"4\"\n                variant=\"outlined\"\n                value={props.value || \"\"}\n                onChange={props.handleChange}\n                name=\"kanji\"\n                style={{width: '100%', backgroundColor: 'white', borderRadius:20}}\n                disabled={props.disabled}\n            />\n        </Fragment>\n    );\n};","import { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport {checkIfInputIsJapanese} from \"../utils/checkInput\";\n\nexport const useTranslation = value => {\n    const [translation, setTranslation] = useState(\"\");\n    const [errorText, setErrorText] = useState(\"\");\n\n    useEffect(() => {\n        if(!value){\n            setTranslation(\"\");\n            return;\n        }\n\n        if (!checkIfInputIsJapanese(value)){\n            setErrorText(\"Input is not Japanese\");\n            return;\n        }\n\n        setErrorText(\"\");\n\n        const obj = {\n            \"app_id\": `${process.env.REACT_APP_API_KEY}`,\n            \"sentence\": `${value}`,\n            \"output_type\": \"hiragana\"\n        };\n\n        async function getTranslation() {\n            const hiragana = await axios.post(\"https://labs.goo.ne.jp/api/hiragana\", obj).then(hiragana => {\n                return hiragana.data.converted;\n            });\n            setTranslation(hiragana);\n        }\n\n        getTranslation();\n    }, [value]);\n\n    return [translation, errorText];\n} ","export const checkIfInputIsJapanese = input => {\n    const regex = /[一-龯]/g;\n    if (regex.test(input)) {\n        return true;\n    }\n    return false;\n};","import React, { useEffect, useState } from 'react';\nimport '../../styles/components/home/App.css';\nimport Container from '@material-ui/core/Container';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextBox from \"../../components/home/textBox\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport { useTranslation } from \"../../hooks/useTranslation\";\n\n\nconst useStyles = makeStyles(theme => ({\n  error: {\n    fontSize: 20,\n    color: 'red'\n  },\n  textBoxText: {\n    textAlign: 'center',\n    fontSize: 26\n  }\n}));\n\n\nfunction App() {\n  const classes = useStyles();\n  const [kanji, setKanji] = useState(\"\");\n  const [translation,errorText ] = useTranslation(kanji);\n\n  const handleChange = event => {\n    setKanji(event.target.value);\n  };\n\n  useEffect(() => {\n    \n  }, [kanji]);\n\n  return (\n    <div className=\"App\">\n      <CssBaseline />\n      <Container fixed>\n        <Grid\n          container\n          spacing={3}\n        >\n          <Grid item xs={3} />\n          <Grid item xs={6}>\n            <p className={classes.textBoxText}>漢字</p>\n            <TextBox value={kanji} handleChange={handleChange} disabled={false}/><br />\n          </Grid>\n          <Grid item xs={3} />\n\n          <Grid item xs={3} />\n          <Grid item xs={6}>\n            <p className={classes.textBoxText}>ひらがな</p>\n            <TextBox value={translation} handleChange={handleChange} disabled={true}/>\n            {errorText ? <p className={classes.error}>Input is not Japanese</p> : null}\n          </Grid>\n          <Grid item xs={3} />\n        </Grid>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import React, { Fragment } from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Home from \"../views/home/App\";\n\nconst HomeRouter = () => (\n    <Fragment>\n        <Switch>\n            <Route exact path=\"/\" component={Home} />\n        </Switch>\n    </Fragment>\n);\n\nexport default HomeRouter;","import React, { Fragment } from \"react\";\nimport { Router, Route, Switch } from \"react-router-dom\";\nimport history from \"../utils/history\";\nimport Home from \"./home\";\n\nconst AppRouter = () => (\n    <Fragment>\n        <Router history={history}>\n            <Switch>\n                <Route path=\"/\" component={Home} />\n            </Switch>\n        </Router>\n    </Fragment>\n);\n\nexport default AppRouter;\n","import {createMuiTheme } from '@material-ui/core/styles';\n\nexport const theme = createMuiTheme({\n    overrides: {\n      MuiOutlinedInput:{\n        root:{\n          borderRadius:20\n        }\n      },\n      MuiInputBase:{\n          root:{\n              fontSize:20\n          }\n      }\n    }\n});  ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/base/index.css';\nimport Index from './routes/index';\nimport { MuiThemeProvider} from '@material-ui/core/styles';\nimport {theme} from \"./styles/overrideTheme\";\nimport * as serviceWorker from './serviceWorker';\n\nconst finalApp = (\n    <MuiThemeProvider theme={theme}>\n        <Index/>\n    </MuiThemeProvider>\n);\n\nReactDOM.render(finalApp, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}